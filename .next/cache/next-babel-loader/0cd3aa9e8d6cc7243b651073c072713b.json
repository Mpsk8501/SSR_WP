{"ast":null,"code":"import delay from './delay';\n\nfunction compare(field, order) {\n  let len = arguments.length;\n\n  if (len === 0) {\n    return (a, b) => a < b && -1 || a > b && 1 || 0;\n  }\n\n  if (len === 1) {\n    switch (typeof field) {\n      case 'number':\n        return field < 0 ? (a, b) => a < b && 1 || a > b && -1 || 0 : (a, b) => a < b && -1 || a > b && 1 || 0;\n\n      case 'string':\n        return (a, b) => a[field] < b[field] && -1 || a[field] > b[field] && 1 || 0;\n    }\n  }\n\n  if (len === 2 && typeof order === 'number') {\n    return order < 0 ? (a, b) => a[field] < b[field] && 1 || a[field] > b[field] && -1 || 0 : (a, b) => a[field] < b[field] && -1 || a[field] > b[field] && 1 || 0;\n  }\n\n  let fields, orders;\n\n  if (typeof field === 'object') {\n    fields = Object.getOwnPropertyNames(field);\n    orders = fields.map(key => field[key]);\n    len = fields.length;\n  } else {\n    fields = new Array(len);\n    orders = new Array(len);\n\n    for (let i = len; i--;) {\n      fields[i] = arguments[i];\n      orders[i] = 1;\n    }\n  }\n\n  return (a, b) => {\n    for (let i = 0; i < len; i++) {\n      if (a[fields[i]] < b[fields[i]]) return orders[i];\n      if (a[fields[i]] > b[fields[i]]) return -orders[i];\n    }\n\n    return 0;\n  };\n}\n\nconst arrSort = async (arr, key = null) => {\n  await delay(100);\n  return arr.sort((a, b) => a[key] - b[key]);\n};\n\nexport default arrSort;","map":{"version":3,"sources":["H:/forIT/SSR_WP/helpers/arrSort.js"],"names":["delay","compare","field","order","len","arguments","length","a","b","fields","orders","Object","getOwnPropertyNames","map","key","Array","i","arrSort","arr","sort"],"mappings":"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","sourcesContent":["import delay from './delay'\r\n\r\nfunction compare(field, order) {\r\n   let len = arguments.length;\r\n   if(len === 0) {\r\n      return (a, b) => (a < b && -1) || (a > b && 1) || 0;\r\n   }\r\n   if(len === 1) {\r\n      switch(typeof field) {\r\n         case 'number':\r\n            return field < 0 ?\r\n                ((a, b) => (a < b && 1) || (a > b && -1) || 0) :\r\n                ((a, b) => (a < b && -1) || (a > b && 1) || 0);\r\n         case 'string':\r\n            return (a, b) => (a[field] < b[field] && -1) || (a[field] > b[field] && 1) || 0;\r\n      }\r\n   }\r\n   if(len === 2 && typeof order === 'number') {\r\n      return order < 0 ?\r\n          ((a, b) => (a[field] < b[field] && 1) || (a[field] > b[field] && -1) || 0) :\r\n          ((a, b) => (a[field] < b[field] && -1) || (a[field] > b[field] && 1) || 0);\r\n   }\r\n   let fields, orders;\r\n   if(typeof field === 'object') {\r\n      fields = Object.getOwnPropertyNames(field);\r\n      orders = fields.map(key => field[key]);\r\n      len = fields.length;\r\n   } else {\r\n      fields = new Array(len);\r\n      orders = new Array(len);\r\n      for(let i = len; i--;) {\r\n         fields[i] = arguments[i];\r\n         orders[i] = 1;\r\n      }\r\n   }\r\n   return (a, b) => {\r\n      for(let i = 0; i < len; i++) {\r\n         if(a[fields[i]] < b[fields[i]]) return orders[i];\r\n         if(a[fields[i]] > b[fields[i]]) return -orders[i];\r\n      }\r\n      return 0;\r\n   };\r\n}\r\n\r\n\r\n\r\nconst arrSort = async (arr,key=null) => {\r\n   await delay(100)\r\n   return arr.sort((a,b) => a[key] - b[key])\r\n\r\n}\r\n\r\nexport default arrSort"]},"metadata":{},"sourceType":"module"}